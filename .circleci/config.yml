version: 2.1

commands:
    checkout-alpine:
        description: Install alpine requirements for checkout
        steps:
            - run:
                  name: "Install alpine requirements for checkout"
                  command: apk add git openssh-client curl make
            - checkout

    composer-install:
        description: "Install dependencies"
        steps:
            - run:
                  name: "Execute: composer install"
                  command: |
                      if [ ! -f vendor/autoload.php ];then
                          curl https://getcomposer.org/composer.phar --location --silent  --output /usr/bin/composer;
                          chmod +x /usr/bin/composer;
                          composer global require hirak/prestissimo;
                          composer install --no-interaction --no-progress;
                      fi

    restore-composer-cache:
        description: "Restore vendor folder from CircleCI cache"
        steps:
            - restore_cache:
                  key: composer-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}

    store-composer-cache:
        description: "Store vendor folder in CircleCI cache"
        steps:
            - checkout-alpine
            - restore-composer-cache
            - composer-install
            - save_cache:
                  key: composer-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}
                  paths:
                      - ./vendor
            - persist_to_workspace:
                  root: .
                  paths:
                      - vendor

    install-php-requirements:
        description: "Install PHP requirements"
        steps:
            - run:
                  name: "Install PDO"
                  command: sudo docker-php-ext-install pdo_mysql

    wait-mysql:
        description: "Wait MySQL"
        steps:
            - run:
                  name: "Waiting for MySQL to be ready"
                  command: |
                      for i in `seq 1 10`;
                      do
                          nc -z 127.0.0.1 3306 && echo Success && exit 0
                          echo -n .
                          sleep 1
                      done
                      echo Failed waiting for MySQL && exit 1

    phpcs:
        description: "Execute PHPCS"
        steps:
            - run:
                  name: "Execute: make phpcs"
                  command: make phpcs

    phpstan:
        description: "Execute PHPStan"
        steps:
            - run:
                  name: "Execute: make stan"
                  command: make stan

    phpunit:
        description: "Execute PHPUnit"
        steps:
            - run:
                  name: "Execute: make phpunit"
                  command: make phpunit

executors:
    php:
        docker:
            - image: php:7.1-alpine
        working_directory: ~/repository

    php_mysql:
        docker:
            - image: php:7.1-alpine
            - image: mysql:5.7
              environment:
                  MYSQL_ROOT_PASSWORD: nested_set
                  MYSQL_DATABASE: nested_set
                  MYSQL_USER: nested_set
                  MYSQL_PASSWORD: nested_set
                  MYSQL_DOCKER_HOST: 127.0.0.1
        working_directory: ~/repository

jobs:
    composer:
        executor: php
        steps:
            - store-composer-cache

    phpcs:
        executor: php
        steps:
            - checkout-alpine
            - restore-composer-cache
            - phpcs

    phpstan:
        executor: php
        steps:
            - checkout-alpine
            - restore-composer-cache
            - phpstan

    phpunit:
        executor: php_mysql
        steps:
            - checkout-alpine
            - restore-composer-cache
            - install-php-requirements
            - wait-mysql
            - phpunit

workflows:
    version: 2.1
    Code quality:
        jobs:
            - composer
            - phpcs:
                  requires:
                      - composer
            - phpstan:
                  requires:
                      - composer
            - phpunit:
                  requires:
                      - composer
